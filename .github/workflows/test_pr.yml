name: Test PR
on:
  pull_request:

jobs:
  test:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: get golang version 1
        run: |
          export VERSION=$(cat .golang_version | awk -F',' '{print $1}' | sed 's/go1/go-1/')
          DOTS=$(echo -n $VERSION | awk -F"." '{print NF-1}')
          if [ "$DOTS" == "1" ]; then
            echo "value=$VERSION.0" >> $GITHUB_OUTPUT
            echo "wildcard=$VERSION.x" >> $GITHUB_OUTPUT
          else
            echo "value=$VERSION" >> $GITHUB_OUTPUT
            echo "wildcard=$(echo -n $VERSION | sed 's/\.[^.]*$/.x/')" >> $GITHUB_OUTPUT
          fi
        id: golang_version_1
      - name: get golang version 2
        run: |
          export VERSION=$(cat .golang_version | awk -F',' '{print $2}' | sed 's/go1/go-1/')
          DOTS=$(echo -n $VERSION | awk -F"." '{print NF-1}')
          if [ "$DOTS" == "1" ]; then
            echo "value=$VERSION.0" >> $GITHUB_OUTPUT
            echo "wildcard=$VERSION.x" >> $GITHUB_OUTPUT
          else
            echo "value=$VERSION" >> $GITHUB_OUTPUT
            echo "wildcard=$(echo -n $VERSION | sed 's/\.[^.]*$/.x/')" >> $GITHUB_OUTPUT
          fi
        id: golang_version_2
      - name: get if toolchain should be built
        run: |
          export VAL=$(git diff-tree --no-commit-id --name-only -r ${{ github.sha }} | grep "docker/toolchain" | wc -l | awk '{print $1}')
          echo $VAL
          echo "value=$(echo -n $VAL)" >> $GITHUB_OUTPUT
        id: do_toolchain_build
      - name: Setup BATS
        uses: mig4/setup-bats@v1
        with:
          bats-version: 1.2.1
      - name: build images
        run: |
          docker buildx build --file docker/toolchain/Dockerfile --tag techknowlogick/xgo:toolchain --tag toolchain --load docker/toolchain/
          docker buildx build --file docker/${{ steps.golang_version_1.outputs.value }}/Dockerfile --tag ${{ steps.golang_version_1.outputs.value }}-base --load docker/${{ steps.golang_version_1.outputs.value }}/
          docker buildx build --file docker/build/Dockerfile --tag techknowlogick/xgo:${{ steps.golang_version_1.outputs.value }} --tag techknowlogick/xgo:${{ steps.golang_version_1.outputs.wildcard }} --tag techknowlogick/xgo:latest --build-arg VERSION=${{ steps.golang_version_1.outputs.value }} --build-arg SHA=${{ github.sha }} --load docker/build/
          docker buildx build --file docker/${{ steps.golang_version_2.outputs.value }}/Dockerfile --tag ${{ steps.golang_version_2.outputs.value }}-base --load docker/${{ steps.golang_version_2.outputs.value }}/
          docker buildx build --file docker/build/Dockerfile --tag techknowlogick/xgo:${{ steps.golang_version_2.outputs.value }} --tag techknowlogick/xgo:${{ steps.golang_version_2.outputs.wildcard }} --tag techknowlogick/xgo:latest --build-arg VERSION=${{ steps.golang_version_2.outputs.value }} --build-arg SHA=${{ github.sha }} --load docker/build/
          mkdir -p .xgo-cache
          mkdir -p ~/go/src
          env IMAGEID="techknowlogick/xgo:${{ steps.golang_version_2.outputs.value }}" bats xgo.bats

